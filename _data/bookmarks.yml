serverless:
  - name: Learn About Serverless Framework
    description: Dive into the Serverless Framework with this comprehensive playlist. Explore the core concepts, features, and best practices for building serverless applications using Serverless Framework.
    link: https://www.youtube.com/playlist?list=PLL2hlSFBmWwzA7ut0KKYM6F8LKfu84-5c
  - name: Composing Serverless Framework services
    description: Serverless Framework Compose streamlines the deployment and orchestration of multiple services within a monorepository, offering capabilities such as parallel deployment, orderly deployment sequencing, seamless sharing of outputs between services, and the ability to execute commands across the entire service ecosystem.
    link: https://www.serverless.com/framework/docs/guides/compose 

AWS:
  - name: Getting Started with Amazon Athena
    description: Learn the basics of Amazon Athena, an interactive query service that makes it easy to analyze data in Amazon S3 using standard SQL. Get started with querying data, creating tables, and visualizing results.
    link: https://www.youtube.com/playlist?list=PLL2hlSFBmWwyuX-J0lTJE1jNqLwkW_124
  - name: Efficiently Streaming a Large AWS S3 File via S3 Select
    description: This article explores how to efficiently stream large files stored in Amazon S3 using S3 Select, a feature that allows you to retrieve specific data from objects without retrieving the entire object. The author provides a step-by-step guide on setting up S3 Select and demonstrates how to use it to process large CSV files, significantly reducing processing time and resource consumption.
    link: https://dev.to/idrisrampurawala/efficiently-streaming-a-large-aws-s3-file-via-s3-select-4on
  - name: Parallelize Processing a Large AWS S3 File
    description: This article discusses techniques for parallelizing the processing of large files stored in Amazon S3. 
    link: https://dev.to/idrisrampurawala/parallelize-processing-a-large-aws-s3-file-8eh
  - name: Search text from PDF files stored in an S3 bucket
    description: Does your application allow users to upload PDFs? Maybe they upload resumes, waivers, agreements or signed documents. What if they need to search the contents of these PDFs?
    link: https://medium.com/@mixpeek/search-text-from-pdf-files-stored-in-an-s3-bucket-2f10947eebd3
  - name: Exploring AWS Textract, Comprehend, and S3 Using Streamlit
    description: Explore the capabilities of AWS Textract, Comprehend, and S3 through the lens of Streamlit, a popular framework for building interactive web applications. This article guides you through leveraging these AWS services with Streamlit for a variety of text processing tasks.
    link: https://medium.com/aws-in-plain-english/exploring-aws-textract-comprehend-and-s3-using-streamlit-13a9653bf6f2
Text Extraction:
  - name: Apache Tika for Document Text Extraction
    description: Apache Tika is a powerful tool for extracting text and metadata from various file formats, including documents, spreadsheets, presentations, and more. Learn how to leverage Apache Tika for efficient text extraction in your projects.
    link: https://tika.apache.org/
  - name: Apache Tika Python Binding
    description: Discover the Python binding for Apache Tika, enabling seamless integration of Tika's functionality into Python applications. Extract text from diverse file types effortlessly with Apache Tika's Python package.
    link: https://github.com/chrismattmann/tika-python
Text Classification:
  - name: Presidio service with Lambda Function
    description: Learn how to integrate Presidio, an open-source tool for sensitive data detection and anonymization, with AWS Lambda to create a serverless solution for text classification. This article provides a detailed guide on setting up the Presidio service with Lambda functions.
    link: https://medium.com/@tqueansg15012003/presidio-service-with-lambda-function-ccccfed19e6f
Load Testing:
  - name: HTTP load testing tool and library
    description: Vegeta is a versatile HTTP load testing tool built out of a need to drill HTTP services with a constant request rate. It's over 9000!
    link: https://github.com/tsenart/vegeta
